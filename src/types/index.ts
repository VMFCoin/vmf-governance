// Core types for the application

// Base proposal interface (shared properties)
export interface BaseProposal {
  id: string;
  title: string;
  author: string;
  status: 'active' | 'passed' | 'failed' | 'pending';
  timeLeft: string;
  yesPercentage: number;
  noPercentage: number;
  abstainPercentage: number;
  description?: string;
  createdAt: Date;
  votingEndsAt: Date;
}

// Charity-related types
export interface Charity {
  id: string;
  name: string;
  description: string;
  website: string;
  ein: string; // Tax ID
  category:
    | 'veterans'
    | 'military_families'
    | 'disabled_veterans'
    | 'mental_health'
    | 'general_support';
  verificationStatus: 'verified' | 'pending' | 'rejected';
  impactMetrics: {
    veteransServed: number;
    fundingReceived: number;
    programs: string[];
  };
  documents: {
    type: '501c3' | 'financial_report' | 'impact_report';
    url: string;
    uploadedAt: Date;
  }[];
  addedAt: Date;
  verifiedAt?: Date;
}

export interface CharitySubmission {
  name: string;
  description: string;
  website: string;
  ein: string;
  category:
    | 'veterans'
    | 'military_families'
    | 'disabled_veterans'
    | 'mental_health'
    | 'general_support';
  contactEmail: string;
  contactPhone: string;
  address: {
    street: string;
    city: string;
    state: string;
    zipCode: string;
  };
  missionStatement: string;
  veteranFocus: string;
  impactDescription: string;
  requestedDocuments: File[];
}

// Military Holiday types
export interface MilitaryHoliday {
  id: string;
  name: string;
  date: Date;
  description: string;
  significance: string;
  fundAllocation: number;
  isVotingEligible: boolean;
  flagIcon: string;
  category: 'major' | 'observance' | 'awareness';
}

// Feature specification types
export interface FeatureSpec {
  title: string;
  description: string;
  userStory: string;
  acceptanceCriteria: string[];
  technicalRequirements: string;
  designMockups?: File[];
  priority: 'low' | 'medium' | 'high' | 'critical';
  estimatedEffort: string;
  targetUsers: string[];
  businessValue: string;
}

// Type-specific proposal interfaces
export interface HolidayCharityProposal extends BaseProposal {
  type: 'holiday_charity';
  holidayId: string;
  availableCharities: string[]; // Array of charity IDs
  selectedCharity?: string;
  isAutoGenerated: true;
  fundAmount: number;
  votingType: 'charity_selection'; // Users vote for which charity
}

export interface CharityDirectoryProposal extends BaseProposal {
  type: 'charity_directory';
  charityData: CharitySubmission;
  verificationDocuments: string[]; // File URLs
  isAutoGenerated: false;
  votingType: 'approval'; // Yes/No/Abstain voting
}

export interface PlatformFeatureProposal extends BaseProposal {
  type: 'platform_feature';
  featureSpecification: FeatureSpec;
  implementationComplexity: 'low' | 'medium' | 'high';
  estimatedDevelopmentTime: string;
  isAutoGenerated: false;
  votingType: 'approval'; // Yes/No/Abstain voting
}

// Legacy proposal type for backward compatibility
export interface LegacyProposal extends BaseProposal {
  type: 'legacy';
  isAutoGenerated: false;
  votingType: 'approval';
}

// Union type for all proposals
export type Proposal =
  | HolidayCharityProposal
  | CharityDirectoryProposal
  | PlatformFeatureProposal
  | LegacyProposal;

// Proposal type utilities
export type ProposalType = Proposal['type'];
export type VotingType = Proposal['votingType'];

// Additional types for the application
export interface User {
  id: string;
  address: string;
  ensName?: string;
  votingPower: number;
}

export interface VoteRecord {
  proposalId: string;
  userId: string;
  vote: 'yes' | 'no' | 'abstain' | string; // string for charity selection votes
  timestamp: Date;
  votingPower: number;
}

export interface Holiday {
  id: string;
  name: string;
  date: Date;
  description?: string;
  isVotingDay?: boolean;
}

// Proposal submission form types
export interface ProposalFormData {
  type: ProposalType;
  title: string;
  category: string;
  summary: string;
  description: string;
  fundingAmount: string;
  timeline: string;
  beneficiaries: string;
  attachments: File[];
  // Type-specific fields
  charityData?: CharitySubmission;
  featureSpecification?: FeatureSpec;
}

export interface FormErrors {
  type?: string;
  title?: string;
  category?: string;
  summary?: string;
  description?: string;
  fundingAmount?: string;
  timeline?: string;
  beneficiaries?: string;
  attachments?: string;
  // Type-specific errors
  charityData?: Partial<Record<keyof CharitySubmission, string>>;
  featureSpecification?: Partial<Record<keyof FeatureSpec, string>>;
}

export interface Step {
  id: number;
  title: string;
  description: string;
}

// Community features types for Phase 5
export interface CommunityPost {
  id: string;
  title: string;
  content: string;
  author: string;
  authorAddress: string;
  createdAt: Date;
  upvotes: number;
  downvotes: number;
  category: 'idea' | 'discussion' | 'feedback' | 'announcement';
  tags: string[];
  isPromoted?: boolean;
  userVote?: 'up' | 'down' | null;
}

export interface Reaction {
  id: string;
  postId: string;
  userId: string;
  type: 'up' | 'down';
  timestamp: Date;
}

export interface CalendarEvent {
  id: string;
  title: string;
  date: Date;
  type: 'holiday' | 'voting' | 'community' | 'announcement';
  description?: string;
  isVotingDay?: boolean;
  flagIcon?: string;
  priority: 'high' | 'medium' | 'low';
}

export interface Notification {
  id: string;
  userId: string;
  type:
    | 'vote_reminder'
    | 'new_proposal'
    | 'community_post'
    | 'event_reminder'
    | 'holiday_voting';
  title: string;
  message: string;
  isRead: boolean;
  createdAt: Date;
  actionUrl?: string;
}
