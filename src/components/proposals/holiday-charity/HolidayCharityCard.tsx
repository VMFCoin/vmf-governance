'use client';

import React, { useMemo, useCallback } from 'react';
import Link from 'next/link';
import {
  Clock,
  Star,
  Users,
  TrendingUp,
  Calendar,
  DollarSign,
} from 'lucide-react';
import { motion } from 'framer-motion';
import { Button } from '@/components/ui';
import AnimatedCard from '@/components/ui/AnimatedCard';
import { SimpleTooltip } from '@/components/ui/AnimatedTooltip';
import { ProposalTypeIndicator } from '../shared/ProposalTypeIndicator';
import { fadeInVariants } from '@/lib/animations';
import { HolidayCharityProposal, Charity } from '@/types';
import { useCharityStore } from '@/stores/useCharityStore';
import { cn } from '@/lib/utils';
import { useWalletConnection } from '@/hooks/useWalletConnection';
import { useProposalStore } from '@/stores/useProposalStore';

interface HolidayCharityCardProps {
  proposal: HolidayCharityProposal;
  className?: string;
}

export const HolidayCharityCard: React.FC<HolidayCharityCardProps> = ({
  proposal,
  className,
}) => {
  const { address } = useWalletConnection();
  const { getUserVote } = useProposalStore();

  // Use Zustand selectors to prevent unnecessary re-renders
  const charities = useCharityStore(state => state.charities);
  const isLoading = useCharityStore(state => state.isLoading);
  const fetchCharities = useCharityStore(state => state.fetchCharities);
  const getCharityById = useCharityStore(state => state.getCharityById);

  // Memoized function to fetch charities only when needed
  const ensureCharitiesLoaded = useCallback(() => {
    if (charities.length === 0 && !isLoading) {
      fetchCharities();
    }
  }, [charities.length, isLoading, fetchCharities]);

  // Call the function once to ensure data is loaded
  React.useEffect(() => {
    ensureCharitiesLoaded();
  }, [ensureCharitiesLoaded]);

  const getStatusColor = (status: HolidayCharityProposal['status']) => {
    switch (status) {
      case 'active':
        return 'bg-patriotRed text-patriotWhite shadow-patriot-glow';
      case 'passed':
        return 'bg-green-600 text-white shadow-lg';
      case 'failed':
        return 'bg-gray-600 text-white shadow-lg';
      case 'pending':
        return 'bg-yellow-600 text-white shadow-lg';
      default:
        return 'bg-gray-600 text-white shadow-lg';
    }
  };

  // Optimized charity data computation
  const availableCharities = useMemo(() => {
    // If still loading or no charities available, show loading state
    if (isLoading || charities.length === 0) {
      return Array.from({ length: 6 }, (_, index) => ({
        id: `loading-${index}`,
        name: 'Loading...',
        description: 'Loading charity data...',
        category: 'general_support' as const,
      }));
    }

    // Map charity IDs to actual charity objects
    const mappedCharities = proposal.availableCharities
      .map(id => getCharityById(id))
      .filter((charity): charity is Charity => charity !== undefined);

    // If we have valid charities, return them; otherwise show loading
    return mappedCharities.length > 0
      ? mappedCharities
      : Array.from({ length: 6 }, (_, index) => ({
          id: `loading-${index}`,
          name: 'Loading...',
          description: 'Loading charity data...',
          category: 'general_support' as const,
        }));
  }, [proposal.availableCharities, charities, isLoading, getCharityById]);

  const totalVotes =
    proposal.yesPercentage + proposal.noPercentage + proposal.abstainPercentage;

  return (
    <AnimatedCard
      className={cn(
        'hover:border-patriotRed/70 hover:shadow-patriot-glow transition-all duration-300 group cursor-pointer relative overflow-hidden',
        'bg-gradient-to-br from-patriotBlue/30 to-patriotRed/10 border-patriotRed/30',
        className
      )}
    >
      {/* Patriotic background pattern */}
      <motion.div
        className="absolute inset-0 bg-gradient-to-br from-patriotRed/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"
        style={{
          backgroundImage: `radial-gradient(circle at 20% 20%, rgba(255, 215, 0, 0.03) 1px, transparent 1px),
                           radial-gradient(circle at 80% 80%, rgba(255, 215, 0, 0.02) 1px, transparent 1px)`,
          backgroundSize: '50px 50px, 30px 30px',
        }}
      />

      <Link href={`/proposal/${proposal.id}`} className="block relative z-10">
        <motion.div
          className="flex items-start justify-between mb-4"
          variants={fadeInVariants}
          initial="initial"
          animate="enter"
        >
          <div className="flex items-center gap-3">
            <ProposalTypeIndicator type="holiday_charity" size="sm" />
            {proposal.isAutoGenerated && (
              <span className="px-2 py-1 bg-starGold/20 text-starGold text-xs font-medium rounded-full border border-starGold/30">
                Auto-Generated
              </span>
            )}
          </div>
          <motion.span
            className={`px-3 py-1.5 rounded-full text-sm font-semibold ${getStatusColor(proposal.status)}`}
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
          >
            {proposal.status.charAt(0).toUpperCase() + proposal.status.slice(1)}
          </motion.span>
        </motion.div>

        <motion.h3
          className="text-xl font-semibold text-patriotWhite mb-3 group-hover:text-patriotRed transition-colors leading-tight"
          variants={fadeInVariants}
          initial="initial"
          animate="enter"
          transition={{ delay: 0.1 }}
        >
          {proposal.title}
        </motion.h3>

        <motion.div
          className="flex items-center justify-between mb-4"
          variants={fadeInVariants}
          initial="initial"
          animate="enter"
          transition={{ delay: 0.2 }}
        >
          <div className="flex items-center">
            <Star className="w-4 h-4 text-starGold mr-2" />
            <span className="text-textSecondary text-sm font-medium">
              by <span className="text-textBase">{proposal.author}</span>
            </span>
          </div>
          <SimpleTooltip text="Time remaining to vote">
            <div className="flex items-center text-patriotRed text-sm font-medium">
              <Clock className="w-4 h-4 mr-1" />
              {proposal.timeLeft}
            </div>
          </SimpleTooltip>
        </motion.div>

        {/* Fund Amount Display */}
        <motion.div
          className="bg-patriotRed/10 border border-patriotRed/30 rounded-lg p-4 mb-4"
          variants={fadeInVariants}
          initial="initial"
          animate="enter"
          transition={{ delay: 0.3 }}
        >
          <div className="flex items-center justify-between">
            <div className="flex items-center">
              <DollarSign className="w-5 h-5 text-starGold mr-2" />
              <span className="text-textSecondary text-sm">
                Fund Allocation
              </span>
            </div>
            <span className="text-2xl font-bold text-patriotWhite">
              ${proposal.fundAmount.toLocaleString()}
            </span>
          </div>
          <p className="text-xs text-textSecondary mt-1">
            To be distributed to the winning charity
          </p>
        </motion.div>

        <motion.p
          className="text-textBase mb-6 line-clamp-3 leading-relaxed opacity-90 group-hover:opacity-100 transition-opacity"
          variants={fadeInVariants}
          initial="initial"
          animate="enter"
          transition={{ delay: 0.4 }}
        >
          {proposal.description}
        </motion.p>

        {/* Available Charities Preview */}
        <motion.div
          className="mb-6"
          variants={fadeInVariants}
          initial="initial"
          animate="enter"
          transition={{ delay: 0.5 }}
        >
          <h4 className="text-sm font-semibold text-patriotWhite mb-3 flex items-center">
            <Calendar className="w-4 h-4 mr-2" />
            Available Charities ({availableCharities.length})
          </h4>
          <div className="grid grid-cols-2 gap-2">
            {availableCharities.slice(0, 4).map((charity, index) => (
              <div
                key={charity?.id || `charity-${index}`}
                className="bg-backgroundLight/50 border border-patriotBlue/30 rounded-lg p-2 text-xs"
              >
                <div className="font-medium text-patriotWhite truncate">
                  {charity?.name || 'Unknown Charity'}
                </div>
                <div className="text-textSecondary truncate">
                  {charity?.category?.replace('_', ' ') || 'General'}
                </div>
              </div>
            ))}
          </div>
          {availableCharities.length > 4 && (
            <p className="text-xs text-textSecondary mt-2">
              +{availableCharities.length - 4} more charities available
            </p>
          )}
        </motion.div>

        {/* Voting Progress */}
        <motion.div
          className="mb-6"
          variants={fadeInVariants}
          initial="initial"
          animate="enter"
          transition={{ delay: 0.6 }}
        >
          <div className="flex items-center justify-between text-sm mb-2">
            <span className="text-textSecondary">Voting Progress</span>
            <span className="text-patriotWhite font-medium">
              {totalVotes}% participation
            </span>
          </div>
          <div className="w-full bg-backgroundDark rounded-full h-2 shadow-inner">
            <motion.div
              className="bg-gradient-to-r from-patriotRed to-red-400 h-2 rounded-full shadow-sm"
              initial={{ width: 0 }}
              animate={{ width: `${totalVotes}%` }}
              transition={{ duration: 1, ease: 'easeOut', delay: 0.7 }}
            />
          </div>
        </motion.div>

        <motion.div
          className="flex items-center justify-between pt-4 border-t border-patriotRed/30"
          variants={fadeInVariants}
          initial="initial"
          animate="enter"
          transition={{ delay: 0.8 }}
        >
          <SimpleTooltip text="Number of eligible voters who have participated">
            <div className="flex items-center text-textSecondary text-sm">
              <Users className="w-4 h-4 mr-1" />
              <span className="font-medium">{totalVotes}% voted</span>
            </div>
          </SimpleTooltip>

          <SimpleTooltip text="Charity selection voting">
            <div className="flex items-center text-sm">
              <TrendingUp className="w-4 h-4 mr-1 text-patriotRed" />
              <span className="text-patriotWhite font-semibold">
                Select Charity
              </span>
            </div>
          </SimpleTooltip>
        </motion.div>
      </Link>

      {proposal.status === 'active' && (
        <motion.div
          className="mt-4 pt-4 border-t border-patriotRed/30 relative z-10"
          variants={fadeInVariants}
          initial="initial"
          animate="enter"
          transition={{ delay: 0.9 }}
        >
          <Button
            asChild
            variant="primary"
            size="md"
            className="w-full font-semibold group-hover:shadow-xl bg-gradient-to-r from-patriotRed to-red-600 hover:from-red-600 hover:to-red-700"
          >
            <Link href={`/proposal/${proposal.id}`}>🎖️ Vote for Charity</Link>
          </Button>
        </motion.div>
      )}
    </AnimatedCard>
  );
};
