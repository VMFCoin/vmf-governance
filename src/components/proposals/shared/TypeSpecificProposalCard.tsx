'use client';

import React from 'react';
import { motion } from 'framer-motion';
import {
  Clock,
  DollarSign,
  Users,
  Calendar,
  Target,
  Briefcase,
  Flag,
} from 'lucide-react';
import { cn } from '@/lib/utils';
import {
  Proposal,
  HolidayCharityProposal,
  CharityDirectoryProposal,
  PlatformFeatureProposal,
  LegacyProposal,
} from '@/types';
import { useProposalStore } from '@/stores/useProposalStore';
import { HolidayCharityCard } from '../holiday-charity/HolidayCharityCard';
import { CharityDirectoryCard } from '../charity-directory/CharityDirectoryCard';
import { PlatformFeatureCard } from '../platform-feature/PlatformFeatureCard';
import { LegacyProposalCard } from '../legacy/LegacyProposalCard';

interface TypeSpecificProposalCardProps {
  proposal: Proposal;
  className?: string;
}

const fadeInVariants = {
  initial: { opacity: 0, y: 20 },
  enter: { opacity: 1, y: 0 },
};

export function TypeSpecificProposalCard({
  proposal,
  className,
}: TypeSpecificProposalCardProps) {
  // Use enhanced type handling methods from the proposal store
  const {
    isHolidayCharityProposal,
    isCharityDirectoryProposal,
    isPlatformFeatureProposal,
    getTypedProposal,
  } = useProposalStore();

  // Helper function to convert any proposal to legacy for fallback
  const convertToLegacyProposal = (p: Proposal): LegacyProposal => {
    return {
      id: p.id,
      title: p.title,
      author: p.author,
      status: p.status,
      timeLeft: p.timeLeft,
      yesPercentage: p.yesPercentage,
      noPercentage: p.noPercentage,
      abstainPercentage: p.abstainPercentage,
      description: p.description,
      createdAt: p.createdAt,
      votingEndsAt: p.votingEndsAt,
      type: 'legacy',
      isAutoGenerated: false,
      votingType: 'approval',
    };
  };

  // Enhanced type-safe rendering with store integration
  const renderProposalCard = () => {
    // Type-specific rendering with enhanced responsive design
    switch (proposal.type) {
      case 'holiday_charity': {
        if (isHolidayCharityProposal(proposal)) {
          const typedProposal = getTypedProposal<HolidayCharityProposal>(
            proposal.id,
            'holiday_charity'
          );

          return (
            <HolidayCharityCard
              mode="active"
              proposal={typedProposal || proposal}
              className={className}
            />
          );
        }
        break;
      }

      case 'charity_directory': {
        if (isCharityDirectoryProposal(proposal)) {
          const typedProposal = getTypedProposal<CharityDirectoryProposal>(
            proposal.id,
            'charity_directory'
          );

          return (
            <CharityDirectoryCard
              proposal={typedProposal || proposal}
              className={className}
            />
          );
        }
        break;
      }

      case 'platform_feature': {
        if (isPlatformFeatureProposal(proposal)) {
          const typedProposal = getTypedProposal<PlatformFeatureProposal>(
            proposal.id,
            'platform_feature'
          );

          return (
            <PlatformFeatureCard
              proposal={typedProposal || proposal}
              className={className}
            />
          );
        }
        break;
      }

      case 'legacy': {
        // For legacy proposals, use direct casting since they're already properly typed
        return (
          <LegacyProposalCard
            proposal={proposal as LegacyProposal}
            className={className}
          />
        );
      }

      default: {
        // Enhanced fallback with better error handling
        console.warn(
          `Unknown proposal type: ${(proposal as any).type}. Falling back to legacy card.`
        );
        const legacyProposal = convertToLegacyProposal(proposal);
        return (
          <LegacyProposalCard proposal={legacyProposal} className={className} />
        );
      }
    }

    // Enhanced fallback in case of type mismatch with warning
    console.warn(
      `Type mismatch for proposal ${(proposal as any).id} of type ${(proposal as any).type}. Using legacy fallback.`
    );
    const legacyProposal = convertToLegacyProposal(proposal);
    return (
      <LegacyProposalCard proposal={legacyProposal} className={className} />
    );
  };

  return (
    <div className={cn('proposal-card-wrapper', className)}>
      {renderProposalCard()}
    </div>
  );
}
