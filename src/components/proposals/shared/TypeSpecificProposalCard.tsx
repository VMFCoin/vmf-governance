'use client';

import React from 'react';
import {
  Proposal,
  HolidayCharityProposal,
  CharityDirectoryProposal,
  PlatformFeatureProposal,
  LegacyProposal,
  BaseProposal,
} from '@/types';
import { HolidayCharityCard } from '../holiday-charity';
import { CharityDirectoryCard } from '../charity-directory';
import { PlatformFeatureCard } from '../platform-feature';
import { LegacyProposalCard } from '../legacy';

interface TypeSpecificProposalCardProps {
  proposal: Proposal;
  className?: string;
}

export const TypeSpecificProposalCard: React.FC<
  TypeSpecificProposalCardProps
> = ({ proposal, className }) => {
  // Type guard functions to ensure proper typing
  const isHolidayCharityProposal = (
    p: Proposal
  ): p is HolidayCharityProposal => {
    return p.type === 'holiday_charity';
  };

  const isCharityDirectoryProposal = (
    p: Proposal
  ): p is CharityDirectoryProposal => {
    return p.type === 'charity_directory';
  };

  const isPlatformFeatureProposal = (
    p: Proposal
  ): p is PlatformFeatureProposal => {
    return p.type === 'platform_feature';
  };

  const isLegacyProposal = (p: Proposal): p is LegacyProposal => {
    return p.type === 'legacy';
  };

  // Helper function to convert any proposal to legacy
  const convertToLegacyProposal = (p: Proposal): LegacyProposal => {
    const baseProps = p as BaseProposal;
    return {
      id: baseProps.id,
      title: baseProps.title,
      author: baseProps.author,
      status: baseProps.status,
      timeLeft: baseProps.timeLeft,
      yesPercentage: baseProps.yesPercentage,
      noPercentage: baseProps.noPercentage,
      abstainPercentage: baseProps.abstainPercentage,
      description: baseProps.description,
      createdAt: baseProps.createdAt,
      votingEndsAt: baseProps.votingEndsAt,
      type: 'legacy',
      isAutoGenerated: false,
      votingType: 'approval',
    };
  };

  // Render appropriate component based on proposal type
  switch (proposal.type) {
    case 'holiday_charity':
      if (isHolidayCharityProposal(proposal)) {
        return <HolidayCharityCard proposal={proposal} className={className} />;
      }
      break;

    case 'charity_directory':
      if (isCharityDirectoryProposal(proposal)) {
        return (
          <CharityDirectoryCard proposal={proposal} className={className} />
        );
      }
      break;

    case 'platform_feature':
      if (isPlatformFeatureProposal(proposal)) {
        return (
          <PlatformFeatureCard proposal={proposal} className={className} />
        );
      }
      break;

    case 'legacy':
      if (isLegacyProposal(proposal)) {
        return <LegacyProposalCard proposal={proposal} className={className} />;
      }
      break;

    default:
      // Fallback to legacy proposal card for backward compatibility
      const legacyProposal = convertToLegacyProposal(proposal);
      return (
        <LegacyProposalCard proposal={legacyProposal} className={className} />
      );
  }

  // Fallback in case of type mismatch
  const legacyProposal = convertToLegacyProposal(proposal);
  return <LegacyProposalCard proposal={legacyProposal} className={className} />;
};
