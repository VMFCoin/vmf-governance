import { render, RenderOptions } from '@testing-library/react';
import React, { ReactElement } from 'react';
import {
  Proposal,
  HolidayCharityProposal,
  CharityDirectoryProposal,
  PlatformFeatureProposal,
  LegacyProposal,
  CharitySubmission,
  FeatureSpec,
} from '@/types';

// Mock charity submission data
export const mockCharitySubmission: CharitySubmission = {
  name: 'Veterans Support Foundation',
  description: 'Supporting veterans in their transition to civilian life',
  website: 'https://veteranssupport.org',
  ein: '12-3456789',
  category: 'veterans',
  contactEmail: 'contact@veteranssupport.org',
  contactPhone: '555-123-4567',
  address: {
    street: '123 Main St',
    city: 'Washington',
    state: 'DC',
    zipCode: '20001',
  },
  missionStatement: 'To provide comprehensive support for veterans',
  veteranFocus: 'All veterans and their families',
  impactDescription: 'Helping 1000+ veterans annually',
  requestedDocuments: [],
};

// Mock feature specification data
export const mockFeatureSpec: FeatureSpec = {
  title: 'Enhanced Voting Dashboard',
  description: 'Improved user interface for voting on proposals',
  userStory: 'As a user, I want to easily view and vote on proposals',
  acceptanceCriteria: [
    'Display all active proposals',
    'Allow voting with clear feedback',
    'Show voting results in real-time',
  ],
  technicalRequirements: 'React components with TypeScript',
  priority: 'high',
  estimatedEffort: '2-3 weeks',
  targetUsers: ['All DAO members'],
  businessValue: 'Improved user engagement and voting participation',
};

// Mock proposal data
export const mockHolidayCharityProposal: HolidayCharityProposal = {
  id: 'holiday-1',
  type: 'holiday_charity',
  title: 'Veterans Day Charity Selection',
  author: '0x1234567890123456789012345678901234567890',
  status: 'active',
  timeLeft: '5 days',
  yesPercentage: 65,
  noPercentage: 25,
  abstainPercentage: 10,
  description: 'Select a charity to receive Veterans Day funding',
  createdAt: new Date('2024-01-01'),
  votingEndsAt: new Date('2024-01-08'),
  holidayId: 'veterans-day',
  availableCharities: ['charity-1', 'charity-2', 'charity-3'],
  selectedCharity: 'charity-1',
  isAutoGenerated: true,
  fundAmount: 50000,
  votingType: 'charity_selection',
};

export const mockCharityDirectoryProposal: CharityDirectoryProposal = {
  id: 'charity-1',
  type: 'charity_directory',
  title: 'Add Veterans Support Foundation to Directory',
  author: '0x1234567890123456789012345678901234567890',
  status: 'active',
  timeLeft: '3 days',
  yesPercentage: 75,
  noPercentage: 15,
  abstainPercentage: 10,
  description:
    'Proposal to add Veterans Support Foundation to our charity directory',
  createdAt: new Date('2024-01-01'),
  votingEndsAt: new Date('2024-01-06'),
  charityData: mockCharitySubmission,
  verificationDocuments: ['doc1.pdf', 'doc2.pdf'],
  isAutoGenerated: false,
  votingType: 'approval',
};

export const mockPlatformFeatureProposal: PlatformFeatureProposal = {
  id: 'feature-1',
  type: 'platform_feature',
  title: 'Enhanced Voting Dashboard',
  author: '0x1234567890123456789012345678901234567890',
  status: 'active',
  timeLeft: '7 days',
  yesPercentage: 80,
  noPercentage: 10,
  abstainPercentage: 10,
  description: 'Proposal to implement an enhanced voting dashboard',
  createdAt: new Date('2024-01-01'),
  votingEndsAt: new Date('2024-01-10'),
  featureSpecification: mockFeatureSpec,
  implementationComplexity: 'medium',
  estimatedDevelopmentTime: '2-3 weeks',
  isAutoGenerated: false,
  votingType: 'approval',
};

export const mockLegacyProposal: LegacyProposal = {
  id: 'legacy-1',
  type: 'legacy',
  title: 'General Community Proposal',
  author: '0x1234567890123456789012345678901234567890',
  status: 'active',
  timeLeft: '4 days',
  yesPercentage: 60,
  noPercentage: 30,
  abstainPercentage: 10,
  description: 'A general proposal for community consideration',
  createdAt: new Date('2024-01-01'),
  votingEndsAt: new Date('2024-01-07'),
  isAutoGenerated: false,
  votingType: 'approval',
};

// Array of all mock proposals for testing
export const mockProposals: Proposal[] = [
  mockHolidayCharityProposal,
  mockCharityDirectoryProposal,
  mockPlatformFeatureProposal,
  mockLegacyProposal,
];

// Helper function to get proposal by type
export const getMockProposalByType = (type: Proposal['type']): Proposal => {
  switch (type) {
    case 'holiday_charity':
      return mockHolidayCharityProposal;
    case 'charity_directory':
      return mockCharityDirectoryProposal;
    case 'platform_feature':
      return mockPlatformFeatureProposal;
    case 'legacy':
      return mockLegacyProposal;
    default:
      return mockLegacyProposal;
  }
};

// Helper function to create a proposal with custom properties
export const createMockProposal = (
  type: Proposal['type'],
  overrides: Partial<Proposal> = {}
): Proposal => {
  const baseProposal = getMockProposalByType(type);
  return { ...baseProposal, ...overrides } as Proposal;
};

// Test wrapper component for proposal components
interface ProposalTestWrapperProps {
  children: React.ReactNode;
}

export const ProposalTestWrapper: React.FC<ProposalTestWrapperProps> = ({
  children,
}) => {
  return <div data-testid="proposal-test-wrapper">{children}</div>;
};

// Custom render function for proposal components
export const renderProposalComponent = (
  ui: ReactElement,
  options?: Omit<RenderOptions, 'wrapper'>
) => {
  return render(ui, {
    wrapper: ProposalTestWrapper,
    ...options,
  });
};

// Helper to create proposals with different statuses
export const createProposalWithStatus = (
  type: Proposal['type'],
  status: Proposal['status']
): Proposal => {
  return createMockProposal(type, { status });
};

// Helper to create proposals with different voting percentages
export const createProposalWithVoting = (
  type: Proposal['type'],
  yesPercentage: number,
  noPercentage: number,
  abstainPercentage: number
): Proposal => {
  return createMockProposal(type, {
    yesPercentage,
    noPercentage,
    abstainPercentage,
  });
};

// Mock data for testing edge cases
export const mockProposalWithZeroVotes: Proposal = createMockProposal(
  'charity_directory',
  {
    yesPercentage: 0,
    noPercentage: 0,
    abstainPercentage: 0,
  }
);

export const mockProposalWithHighVotes: Proposal = createMockProposal(
  'platform_feature',
  {
    yesPercentage: 95,
    noPercentage: 3,
    abstainPercentage: 2,
  }
);
