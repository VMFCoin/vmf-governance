import { act, renderHook } from '@testing-library/react';
import { useProposalStore } from '@/stores/useProposalStore';
import { useCharityStore } from '@/stores/useCharityStore';
import { useHolidayStore } from '@/stores/useHolidayStore';
import {
  createMockLocalStorage,
  createMockDate,
  mockRandomUUID,
  createMockCharity,
  createMockMilitaryHoliday,
  resetAllStores,
} from '../stores/store-test-helpers';

// Mock the data imports
jest.mock('@/data/mockData', () => ({
  mockCharities: [],
  mockMilitaryHolidays: [],
  mockProposals: [],
}));

describe('Store Integration Tests', () => {
  let mockLocalStorage: ReturnType<typeof createMockLocalStorage>;
  let mockDate: Date;

  beforeEach(() => {
    // Reset all stores and mocks
    resetAllStores();

    // Setup mocks
    mockLocalStorage = createMockLocalStorage();
    Object.defineProperty(window, 'localStorage', { value: mockLocalStorage });

    mockDate = createMockDate('2024-01-15T10:00:00.000Z');
    mockRandomUUID();

    // Clear console logs for cleaner test output
    jest.spyOn(console, 'log').mockImplementation(() => {});
    jest.spyOn(console, 'error').mockImplementation(() => {});
  });

  afterEach(() => {
    jest.restoreAllMocks();
  });

  describe('Cross-Store Data Flow', () => {
    it('should create holiday charity proposal with correct parameters', async () => {
      const proposalStore = renderHook(() => useProposalStore()).result;
      const charityStore = renderHook(() => useCharityStore()).result;
      const holidayStore = renderHook(() => useHolidayStore()).result;

      // Setup test data
      const mockCharity = createMockCharity({
        id: 'charity-1',
        name: 'Veterans Support Foundation',
      });

      const mockHoliday = createMockMilitaryHoliday({
        id: 'holiday-1',
        name: 'Veterans Day',
        isVotingEligible: true,
        fundAllocation: 100000,
      });

      // Add charity and holiday to their respective stores
      act(() => {
        charityStore.current.addCharity(mockCharity);
        holidayStore.current.addHoliday(mockHoliday);
      });

      // Create holiday charity proposal using actual method signature
      await act(async () => {
        await proposalStore.current.createHolidayCharityProposal(
          mockHoliday.id,
          [mockCharity.id],
          50000
        );
      });

      // Verify proposal was created correctly
      expect(proposalStore.current.proposals).toHaveLength(1);

      const proposal = proposalStore.current.proposals[0];
      expect(proposal.type).toBe('holiday_charity');
      expect(proposal.status).toBe('active');

      // Check type-specific properties
      if (proposal.type === 'holiday_charity') {
        expect(proposal.holidayId).toBe(mockHoliday.id);
        expect(proposal.availableCharities).toContain(mockCharity.id);
        expect(proposal.fundAmount).toBe(50000);
        expect(proposal.isAutoGenerated).toBe(true);
      }
    });

    it('should create charity directory proposal', async () => {
      const proposalStore = renderHook(() => useProposalStore()).result;

      const charitySubmission = {
        name: 'New Veterans Charity',
        description: 'Supporting local veterans',
        website: 'https://newveteranscharity.org',
        ein: '12-3456789',
        category: 'veterans' as const,
        contactEmail: 'contact@newveteranscharity.org',
        contactPhone: '555-0123',
        address: {
          street: '123 Main St',
          city: 'City',
          state: 'State',
          zipCode: '12345',
        },
        missionStatement: 'To support veterans in need',
        veteranFocus: 'All veterans',
        impactDescription: 'Helping veterans with various needs',
        requestedDocuments: [],
      };

      // Create charity directory proposal
      await act(async () => {
        await proposalStore.current.createCharityDirectoryProposal(
          charitySubmission
        );
      });

      // Verify proposal was created
      expect(proposalStore.current.proposals).toHaveLength(1);
      const proposal = proposalStore.current.proposals[0];
      expect(proposal.type).toBe('charity_directory');
      expect(proposal.status).toBe('active');

      if (proposal.type === 'charity_directory') {
        expect(proposal.charityData.name).toBe('New Veterans Charity');
        expect(proposal.isAutoGenerated).toBe(false);
      }
    });

    it('should create platform feature proposal', async () => {
      const proposalStore = renderHook(() => useProposalStore()).result;

      const featureSpec = {
        title: 'Enhanced Charity Search',
        description: 'Improve search functionality with advanced filters',
        userStory:
          'As a user, I want to filter charities by location and category',
        acceptanceCriteria: [
          'Filter by location',
          'Filter by category',
          'Filter by rating',
        ],
        technicalRequirements: 'Frontend filters with backend API support',
        priority: 'high' as const,
        estimatedEffort: '6 months',
        targetUsers: ['Veterans', 'Donors', 'Families'],
        businessValue: 'Improved user experience and charity discovery',
      };

      // Create platform feature proposal
      await act(async () => {
        await proposalStore.current.createPlatformFeatureProposal(featureSpec);
      });

      // Verify proposal was created
      expect(proposalStore.current.proposals).toHaveLength(1);
      const proposal = proposalStore.current.proposals[0];
      expect(proposal.type).toBe('platform_feature');
      expect(proposal.status).toBe('active');

      if (proposal.type === 'platform_feature') {
        expect(proposal.featureSpecification.title).toBe(
          'Enhanced Charity Search'
        );
        expect(proposal.isAutoGenerated).toBe(false);
      }
    });

    it('should handle voting on proposals', async () => {
      const proposalStore = renderHook(() => useProposalStore()).result;

      // Create a proposal first
      const featureSpec = {
        title: 'Test Feature',
        description: 'Test description',
        userStory: 'As a user...',
        acceptanceCriteria: ['Criteria'],
        technicalRequirements: 'Requirements',
        priority: 'medium' as const,
        estimatedEffort: '1 month',
        targetUsers: ['Users'],
        businessValue: 'Value',
      };

      await act(async () => {
        await proposalStore.current.createPlatformFeatureProposal(featureSpec);
      });

      const proposalId = proposalStore.current.proposals[0].id;

      // Submit vote using actual method signature
      await act(async () => {
        await proposalStore.current.submitVote(proposalId, 'yes', 1);
      });

      // Verify vote was recorded
      const userVote = proposalStore.current.getUserVote(proposalId);
      expect(userVote).toBeDefined();
      expect(userVote?.vote).toBe('yes');
    });
  });

  describe('Data Persistence Integration', () => {
    it('should persist and restore all store data across sessions', () => {
      const proposalStore = renderHook(() => useProposalStore()).result;
      const charityStore = renderHook(() => useCharityStore()).result;
      const holidayStore = renderHook(() => useHolidayStore()).result;

      // Add data to all stores
      const mockCharity = createMockCharity();
      const mockHoliday = createMockMilitaryHoliday();

      act(() => {
        charityStore.current.addCharity(mockCharity);
        holidayStore.current.addHoliday(mockHoliday);
      });

      // Verify data was persisted
      expect(mockLocalStorage.getItem('vmf-charity-store')).toBeTruthy();
      expect(mockLocalStorage.getItem('vmf-holiday-store')).toBeTruthy();

      // Simulate new session by creating new store instances
      const newCharityStore = renderHook(() => useCharityStore()).result;
      const newHolidayStore = renderHook(() => useHolidayStore()).result;

      // Verify data was restored
      expect(newCharityStore.current.charities).toHaveLength(1);
      expect(newHolidayStore.current.holidays).toHaveLength(1);

      expect(newCharityStore.current.charities[0].id).toBe(mockCharity.id);
      expect(newHolidayStore.current.holidays[0].id).toBe(mockHoliday.id);
    });

    it('should handle corrupted localStorage data gracefully', () => {
      // Corrupt localStorage data
      mockLocalStorage.setItem('vmf-proposal-store', 'invalid-json');
      mockLocalStorage.setItem('vmf-charity-store', '{"invalid": json}');
      mockLocalStorage.setItem('vmf-holiday-store', '');

      // Should not crash when initializing stores
      const proposalStore = renderHook(() => useProposalStore()).result;
      const charityStore = renderHook(() => useCharityStore()).result;
      const holidayStore = renderHook(() => useHolidayStore()).result;

      // Should initialize with default state
      expect(proposalStore.current.proposals).toEqual([]);
      expect(charityStore.current.charities).toEqual([]);
      expect(holidayStore.current.holidays).toEqual([]);
    });
  });

  describe('User Journey Integration', () => {
    beforeEach(() => {
      jest.useFakeTimers();
    });

    afterEach(() => {
      jest.useRealTimers();
    });

    it('should complete holiday proposal generation workflow', async () => {
      const proposalStore = renderHook(() => useProposalStore()).result;
      const charityStore = renderHook(() => useCharityStore()).result;
      const holidayStore = renderHook(() => useHolidayStore()).result;

      // Step 1: Add charity to directory
      const mockCharity = createMockCharity({
        id: 'charity-1',
        name: 'Veterans Support Foundation',
      });

      act(() => {
        charityStore.current.addCharity(mockCharity);
      });

      // Step 2: Add holiday
      const mockHoliday = createMockMilitaryHoliday({
        id: 'holiday-1',
        name: 'Veterans Day',
        isVotingEligible: true,
        fundAllocation: 100000,
      });

      act(() => {
        holidayStore.current.addHoliday(mockHoliday);
      });

      // Step 3: Generate automated proposal
      let generatedProposal: any;
      await act(async () => {
        generatedProposal = await holidayStore.current.generateHolidayProposal(
          mockHoliday.id
        );
        jest.advanceTimersByTime(2000);
      });

      expect(generatedProposal).toBeDefined();
      expect(generatedProposal.type).toBe('holiday_charity');

      if (generatedProposal && generatedProposal.type === 'holiday_charity') {
        expect(generatedProposal.holidayId).toBe(mockHoliday.id);
        expect(generatedProposal.isAutoGenerated).toBe(true);
      }

      // Step 4: Verify holiday proposal was marked as generated
      if (generatedProposal) {
        expect(
          holidayStore.current.isProposalGenerated(generatedProposal.id)
        ).toBe(true);
      }
    });

    it('should handle charity submission workflow', async () => {
      const charityStore = renderHook(() => useCharityStore()).result;

      // Submit charity for review
      const charitySubmission = {
        name: 'New Veterans Charity',
        description: 'Supporting local veterans',
        website: 'https://newveteranscharity.org',
        ein: '12-3456789',
        category: 'veterans' as const,
        contactEmail: 'contact@newveteranscharity.org',
        contactPhone: '555-0123',
        address: {
          street: '123 Main St',
          city: 'City',
          state: 'State',
          zipCode: '12345',
        },
        missionStatement: 'To support veterans in need',
        veteranFocus: 'All veterans',
        impactDescription: 'Helping veterans with various needs',
        requestedDocuments: [],
      };

      await act(async () => {
        await charityStore.current.submitCharityProposal(charitySubmission);
      });

      // Verify submission was added to pending
      expect(charityStore.current.pendingSubmissions).toHaveLength(1);
      const submission = charityStore.current.pendingSubmissions[0];
      expect(submission.name).toBe(charitySubmission.name);
    });
  });

  describe('Error Handling Integration', () => {
    it('should handle invalid proposal creation gracefully', async () => {
      const proposalStore = renderHook(() => useProposalStore()).result;

      // Try to create proposal with invalid data
      await act(async () => {
        try {
          await proposalStore.current.createHolidayCharityProposal(
            '', // invalid holiday ID
            [], // no charities
            -1 // invalid amount
          );
        } catch (error) {
          // Expected to fail
        }
      });

      // Store should remain in valid state
      expect(proposalStore.current.proposals).toHaveLength(0);
    });

    it('should handle store initialization errors gracefully', () => {
      // Mock console.error to avoid noise in tests
      const consoleSpy = jest
        .spyOn(console, 'error')
        .mockImplementation(() => {});

      // Try to initialize stores with corrupted data
      mockLocalStorage.setItem('vmf-proposal-store', 'invalid-json');

      // Should not crash
      const proposalStore = renderHook(() => useProposalStore()).result;
      expect(proposalStore.current.proposals).toEqual([]);

      consoleSpy.mockRestore();
    });
  });

  describe('Performance Integration', () => {
    it('should handle multiple store operations efficiently', () => {
      const proposalStore = renderHook(() => useProposalStore()).result;
      const charityStore = renderHook(() => useCharityStore()).result;
      const holidayStore = renderHook(() => useHolidayStore()).result;

      const startTime = performance.now();

      act(() => {
        // Add multiple items to each store
        for (let i = 0; i < 50; i++) {
          charityStore.current.addCharity(
            createMockCharity({
              id: `charity-${i}`,
              name: `Charity ${i}`,
            })
          );

          holidayStore.current.addHoliday(
            createMockMilitaryHoliday({
              id: `holiday-${i}`,
              name: `Holiday ${i}`,
            })
          );
        }
      });

      const endTime = performance.now();
      const duration = endTime - startTime;

      // Should complete within reasonable time
      expect(duration).toBeLessThan(500); // 500ms

      // Verify all data was added
      expect(charityStore.current.charities).toHaveLength(50);
      expect(holidayStore.current.holidays).toHaveLength(50);

      // Test filtering performance
      const filterStartTime = performance.now();

      const filteredCharities =
        charityStore.current.getCharitiesByCategory('veterans');
      const filteredHolidays =
        holidayStore.current.getHolidaysByCategory('major');

      const filterEndTime = performance.now();
      const filterDuration = filterEndTime - filterStartTime;

      expect(filterDuration).toBeLessThan(50); // 50ms
    });
  });

  describe('Store State Synchronization', () => {
    it('should maintain consistent state across multiple store updates', () => {
      const proposalStore = renderHook(() => useProposalStore()).result;
      const charityStore = renderHook(() => useCharityStore()).result;

      // Add charity
      const mockCharity = createMockCharity({ id: 'charity-1' });

      act(() => {
        charityStore.current.addCharity(mockCharity);
      });

      // Update charity
      act(() => {
        charityStore.current.updateCharity('charity-1', {
          name: 'Updated Charity Name',
        });
      });

      // Verify update was applied
      const updatedCharity = charityStore.current.getCharityById('charity-1');
      expect(updatedCharity?.name).toBe('Updated Charity Name');

      // Verify other properties remain unchanged
      expect(updatedCharity?.id).toBe('charity-1');
      expect(updatedCharity?.description).toBe(mockCharity.description);
    });

    it('should handle concurrent store operations', async () => {
      const proposalStore = renderHook(() => useProposalStore()).result;
      const charityStore = renderHook(() => useCharityStore()).result;

      // Perform multiple operations concurrently
      await act(async () => {
        const operations = [
          charityStore.current.submitCharityProposal({
            name: 'Charity 1',
            description: 'Description 1',
            website: 'https://charity1.org',
            ein: '12-3456789',
            category: 'veterans',
            contactEmail: 'contact@charity1.org',
            contactPhone: '555-0123',
            address: {
              street: '123 Main St',
              city: 'City',
              state: 'State',
              zipCode: '12345',
            },
            missionStatement: 'Mission 1',
            veteranFocus: 'Focus 1',
            impactDescription: 'Impact 1',
            requestedDocuments: [],
          }),
          proposalStore.current.createPlatformFeatureProposal({
            title: 'Feature 1',
            description: 'Description 1',
            userStory: 'Story 1',
            acceptanceCriteria: ['Criteria 1'],
            technicalRequirements: 'Requirements 1',
            priority: 'medium',
            estimatedEffort: '1 month',
            targetUsers: ['Users'],
            businessValue: 'Value 1',
          }),
        ];

        await Promise.all(operations);
      });

      // Verify both operations completed successfully
      expect(charityStore.current.pendingSubmissions).toHaveLength(1);
      expect(proposalStore.current.proposals).toHaveLength(1);
    });
  });
});
