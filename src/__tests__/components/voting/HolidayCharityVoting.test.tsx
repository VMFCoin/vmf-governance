import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { HolidayCharityVoting } from '@/components/voting/HolidayCharityVoting';
import { useCharityStore } from '@/stores/useCharityStore';
import { useProposalStore } from '@/stores/useProposalStore';
import { HolidayCharityProposal } from '@/types';

// Mock the stores
jest.mock('@/stores/useCharityStore');
jest.mock('@/stores/useProposalStore');

// Mock UI components
jest.mock('@/components/ui', () => ({
  Button: ({ children, ...props }: any) => (
    <button {...props}>{children}</button>
  ),
  Card: ({ children, ...props }: any) => <div {...props}>{children}</div>,
}));

jest.mock('@/components/ui/AnimatedTooltip', () => ({
  SimpleTooltip: ({ children, ...props }: any) => (
    <div {...props}>{children}</div>
  ),
  AdvancedTooltip: ({ children, ...props }: any) => (
    <div {...props}>{children}</div>
  ),
}));

// Mock utilities and animations
jest.mock('@/lib/utils', () => ({
  cn: (...classes: any[]) => classes.filter(Boolean).join(' '),
}));

jest.mock('@/lib/animations', () => ({
  fadeInVariants: {
    initial: { opacity: 0 },
    enter: { opacity: 1 },
  },
}));

// Mock framer-motion
jest.mock('framer-motion', () => ({
  motion: {
    div: ({ children, ...props }: any) => <div {...props}>{children}</div>,
  },
}));

const mockCharityStore = useCharityStore as jest.MockedFunction<
  typeof useCharityStore
>;
const mockProposalStore = useProposalStore as jest.MockedFunction<
  typeof useProposalStore
>;

const mockCharities = [
  {
    id: 'charity-1',
    name: 'Veterans Support Foundation',
    description: 'Supporting veterans in their transition to civilian life',
    category: 'veterans' as const,
    verificationStatus: 'verified' as const,
    website: 'https://veteranssupport.org',
    ein: '12-3456789',
  },
  {
    id: 'charity-2',
    name: 'Military Family Aid',
    description: 'Providing assistance to military families',
    category: 'military_families' as const,
    verificationStatus: 'verified' as const,
    website: 'https://militaryfamilyaid.org',
    ein: '98-7654321',
  },
];

const mockProposal: HolidayCharityProposal = {
  id: 'holiday-1',
  type: 'holiday_charity',
  title: 'Veterans Day Charity Selection',
  author: '0x1234567890123456789012345678901234567890',
  status: 'active',
  timeLeft: '5 days',
  yesPercentage: 65,
  noPercentage: 25,
  abstainPercentage: 10,
  description: 'Select a charity to receive Veterans Day funding',
  createdAt: new Date('2024-01-01'),
  votingEndsAt: new Date('2024-01-08'),
  holidayId: 'veterans-day',
  availableCharities: ['charity-1', 'charity-2'],
  selectedCharity: 'charity-1',
  isAutoGenerated: true,
  fundAmount: 50000,
  votingType: 'charity_selection',
};

describe('HolidayCharityVoting Component', () => {
  const mockSubmitVote = jest.fn();
  const mockGetCharityById = jest.fn();
  const mockOnVoteSubmitted = jest.fn();

  beforeAll(() => {
    // Fix clipboard issue for userEvent
    Object.defineProperty(window, 'navigator', {
      value: {
        clipboard: {
          writeText: jest.fn(),
        },
      },
      writable: true,
    });
  });

  beforeEach(() => {
    jest.clearAllMocks();

    mockCharityStore.mockReturnValue({
      getCharityById: mockGetCharityById,
      charities: mockCharities,
      addCharity: jest.fn(),
      updateCharity: jest.fn(),
      removeCharity: jest.fn(),
    });

    mockProposalStore.mockReturnValue({
      submitVote: mockSubmitVote,
      proposals: [],
      addProposal: jest.fn(),
      updateProposal: jest.fn(),
      removeProposal: jest.fn(),
      getProposalById: jest.fn(),
      createHolidayCharityProposal: jest.fn(),
      createCharityDirectoryProposal: jest.fn(),
      createPlatformFeatureProposal: jest.fn(),
    });

    mockGetCharityById.mockImplementation((id: string) =>
      mockCharities.find(charity => charity.id === id)
    );
  });

  describe('Basic Rendering', () => {
    it('renders with correct title and description', () => {
      render(<HolidayCharityVoting proposal={mockProposal} />);

      expect(screen.getByText('Holiday Charity Selection')).toBeInTheDocument();
      expect(
        screen.getByText(
          'Choose a charity to receive the holiday fund allocation'
        )
      ).toBeInTheDocument();
    });

    it('displays fund amount correctly', () => {
      render(<HolidayCharityVoting proposal={mockProposal} />);

      expect(screen.getByText('Fund Amount: $50,000')).toBeInTheDocument();
      expect(screen.getByText('Holiday Fund')).toBeInTheDocument();
    });

    it('renders all available charities', () => {
      render(<HolidayCharityVoting proposal={mockProposal} />);

      expect(
        screen.getByText('Veterans Support Foundation')
      ).toBeInTheDocument();
      expect(screen.getByText('Military Family Aid')).toBeInTheDocument();
      expect(
        screen.getByText(
          'Supporting veterans in their transition to civilian life'
        )
      ).toBeInTheDocument();
      expect(
        screen.getByText('Providing assistance to military families')
      ).toBeInTheDocument();
    });
  });

  describe('Charity Selection', () => {
    it('allows selecting a charity', async () => {
      const user = userEvent.setup();
      render(<HolidayCharityVoting proposal={mockProposal} />);

      const charityCard = screen
        .getByText('Veterans Support Foundation')
        .closest('div');
      expect(charityCard).toBeInTheDocument();

      await user.click(charityCard!);

      // Check if the charity is selected (should show checkmark icon)
      // The SVG checkmark appears when charity is selected
      const checkmarkIcon = document.querySelector('.lucide-circle-check-big');
      expect(checkmarkIcon).toBeInTheDocument();
    });

    it('shows verification status for verified charities', () => {
      render(<HolidayCharityVoting proposal={mockProposal} />);

      const verifiedBadges = screen.getAllByText('Verified');
      expect(verifiedBadges).toHaveLength(2); // Both charities are verified
    });

    it('displays charity categories correctly', () => {
      render(<HolidayCharityVoting proposal={mockProposal} />);

      expect(screen.getByText('veterans')).toBeInTheDocument();
      expect(screen.getByText('military families')).toBeInTheDocument();
    });
  });

  describe('Voting Actions', () => {
    it('enables Yes vote button when charity is selected', async () => {
      const user = userEvent.setup();
      render(
        <HolidayCharityVoting
          proposal={mockProposal}
          onVoteSubmitted={mockOnVoteSubmitted}
        />
      );

      // Select a charity first
      const charityCard = screen
        .getByText('Veterans Support Foundation')
        .closest('div');
      await user.click(charityCard!);

      const yesButton = screen.getByRole('button', { name: /vote yes/i });
      expect(yesButton).toBeEnabled();
    });

    it('disables Yes vote button when no charity is selected', () => {
      render(<HolidayCharityVoting proposal={mockProposal} />);

      const yesButton = screen.getByRole('button', { name: /vote yes/i });
      expect(yesButton).toBeDisabled();
    });

    it('shows warning message when no charity is selected', () => {
      render(<HolidayCharityVoting proposal={mockProposal} />);

      expect(
        screen.getByText('Please select a charity before voting "Yes"')
      ).toBeInTheDocument();
    });

    it('submits Yes vote with selected charity', async () => {
      const user = userEvent.setup();
      mockSubmitVote.mockResolvedValue(undefined);

      render(
        <HolidayCharityVoting
          proposal={mockProposal}
          onVoteSubmitted={mockOnVoteSubmitted}
        />
      );

      // Select a charity
      const charityCard = screen
        .getByText('Veterans Support Foundation')
        .closest('div');
      await user.click(charityCard!);

      // Click Yes vote
      const yesButton = screen.getByRole('button', { name: /vote yes/i });
      await user.click(yesButton);

      await waitFor(() => {
        expect(mockSubmitVote).toHaveBeenCalledWith('holiday-1', 'yes', 1);
        expect(mockOnVoteSubmitted).toHaveBeenCalled();
      });
    });

    it('submits No vote without requiring charity selection', async () => {
      const user = userEvent.setup();
      mockSubmitVote.mockResolvedValue(undefined);

      render(
        <HolidayCharityVoting
          proposal={mockProposal}
          onVoteSubmitted={mockOnVoteSubmitted}
        />
      );

      const noButton = screen.getByRole('button', { name: /vote no/i });
      await user.click(noButton);

      await waitFor(() => {
        expect(mockSubmitVote).toHaveBeenCalledWith('holiday-1', 'no', 1);
        expect(mockOnVoteSubmitted).toHaveBeenCalled();
      });
    });

    it('submits Abstain vote without requiring charity selection', async () => {
      const user = userEvent.setup();
      mockSubmitVote.mockResolvedValue(undefined);

      render(
        <HolidayCharityVoting
          proposal={mockProposal}
          onVoteSubmitted={mockOnVoteSubmitted}
        />
      );

      const abstainButton = screen.getByRole('button', { name: /abstain/i });
      await user.click(abstainButton);

      await waitFor(() => {
        expect(mockSubmitVote).toHaveBeenCalledWith('holiday-1', 'abstain', 1);
        expect(mockOnVoteSubmitted).toHaveBeenCalled();
      });
    });
  });

  describe('Loading States', () => {
    it('shows loading state during vote submission', async () => {
      const user = userEvent.setup();
      mockSubmitVote.mockImplementation(
        () => new Promise(resolve => setTimeout(resolve, 1000))
      );

      render(<HolidayCharityVoting proposal={mockProposal} />);

      const noButton = screen.getByRole('button', { name: /vote no/i });
      await user.click(noButton);

      // Multiple buttons show "Submitting..." during loading
      expect(screen.getAllByText('Submitting...')).toHaveLength(3);
    });

    it('disables all buttons during submission', async () => {
      const user = userEvent.setup();
      mockSubmitVote.mockImplementation(
        () => new Promise(resolve => setTimeout(resolve, 1000))
      );

      render(<HolidayCharityVoting proposal={mockProposal} />);

      const noButton = screen.getByRole('button', { name: /vote no/i });
      await user.click(noButton);

      // All buttons should be disabled during submission
      const submittingButtons = screen.getAllByRole('button', {
        name: /submitting/i,
      });
      expect(submittingButtons).toHaveLength(3);
      submittingButtons.forEach(button => {
        expect(button).toBeDisabled();
      });
    });
  });

  describe('Error Handling', () => {
    it('handles vote submission errors gracefully', async () => {
      const user = userEvent.setup();
      const consoleError = jest
        .spyOn(console, 'error')
        .mockImplementation(() => {});
      mockSubmitVote.mockRejectedValue(new Error('Network error'));

      render(<HolidayCharityVoting proposal={mockProposal} />);

      const noButton = screen.getByRole('button', { name: /vote no/i });
      await user.click(noButton);

      await waitFor(() => {
        expect(consoleError).toHaveBeenCalledWith(
          'Failed to submit vote:',
          expect.any(Error)
        );
      });

      consoleError.mockRestore();
    });
  });

  describe('Edge Cases', () => {
    it('handles empty charity list', () => {
      const proposalWithNoCharities = {
        ...mockProposal,
        availableCharities: [],
      };

      mockGetCharityById.mockReturnValue(undefined);

      render(<HolidayCharityVoting proposal={proposalWithNoCharities} />);

      expect(screen.getByText('Select a Charity')).toBeInTheDocument();
      // Should not show any charity cards
      expect(
        screen.queryByText('Veterans Support Foundation')
      ).not.toBeInTheDocument();
    });

    it('handles missing charity data', () => {
      mockGetCharityById.mockReturnValue(undefined);

      render(<HolidayCharityVoting proposal={mockProposal} />);

      // Should not crash and should still show the voting interface
      expect(screen.getByText('Holiday Charity Selection')).toBeInTheDocument();
    });

    it('works without onVoteSubmitted callback', async () => {
      const user = userEvent.setup();
      mockSubmitVote.mockResolvedValue(undefined);

      render(<HolidayCharityVoting proposal={mockProposal} />);

      const noButton = screen.getByRole('button', { name: /vote no/i });
      await user.click(noButton);

      await waitFor(() => {
        expect(mockSubmitVote).toHaveBeenCalled();
      });
    });
  });
});
