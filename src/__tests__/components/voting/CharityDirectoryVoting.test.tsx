import React from 'react';
import { render, screen, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { CharityDirectoryVoting } from '@/components/voting/CharityDirectoryVoting';
import { useProposalStore } from '@/stores/useProposalStore';
import { CharityDirectoryProposal } from '@/types';

// Mock the store
jest.mock('@/stores/useProposalStore');

// Mock framer-motion
jest.mock('framer-motion', () => ({
  motion: {
    div: ({ children, ...props }: any) => <div {...props}>{children}</div>,
  },
}));

// Mock UI components
jest.mock('@/components/ui/Card', () => ({
  Card: ({ children, ...props }: any) => (
    <div data-testid="card" {...props}>
      {children}
    </div>
  ),
}));

jest.mock('@/components/ui/Button', () => ({
  Button: ({ children, onClick, ...props }: any) => (
    <button onClick={onClick} {...props}>
      {children}
    </button>
  ),
}));

jest.mock('@/components/ui/AnimatedTooltip', () => ({
  AnimatedTooltip: ({ children, content }: any) => (
    <div title={content}>{children}</div>
  ),
}));

jest.mock('@/components/proposals/shared/ProposalTypeIndicator', () => ({
  ProposalTypeIndicator: ({ type }: any) => (
    <div data-testid="proposal-type">{type}</div>
  ),
}));

const mockProposalStore = useProposalStore as jest.MockedFunction<
  typeof useProposalStore
>;

const mockCharityData = {
  name: 'Veterans Support Foundation',
  description:
    'Supporting veterans in their transition to civilian life with comprehensive programs including job training, mental health support, and housing assistance.',
  website: 'https://veteranssupport.org',
  ein: '12-3456789',
  category: 'veterans' as const,
  contactEmail: 'contact@veteranssupport.org',
  contactPhone: '555-123-4567',
  address: {
    street: '123 Main St',
    city: 'Washington',
    state: 'DC',
    zipCode: '20001',
  },
  missionStatement: 'To provide comprehensive support for veterans',
  veteranFocus: 'All veterans and their families',
  impactDescription: 'Helping 1000+ veterans annually',
  requestedDocuments: [],
};

const mockProposal: CharityDirectoryProposal = {
  id: 'charity-1',
  type: 'charity_directory',
  title: 'Add Veterans Support Foundation to Directory',
  author: '0x1234567890123456789012345678901234567890',
  status: 'active',
  timeLeft: '3 days',
  yesPercentage: 75,
  noPercentage: 15,
  abstainPercentage: 10,
  description:
    'Proposal to add Veterans Support Foundation to our charity directory',
  createdAt: new Date('2024-01-01'),
  votingEndsAt: new Date('2024-01-06'),
  charityData: mockCharityData,
  verificationDocuments: ['doc1.pdf', 'doc2.pdf'],
  isAutoGenerated: false,
  votingType: 'approval',
};

const mockProposalWithoutDocs: CharityDirectoryProposal = {
  ...mockProposal,
  verificationDocuments: [],
};

describe('CharityDirectoryVoting Component', () => {
  const mockSubmitVote = jest.fn();
  const mockOnVoteSubmitted = jest.fn();

  beforeEach(() => {
    jest.clearAllMocks();

    mockProposalStore.mockReturnValue({
      submitVote: mockSubmitVote,
      proposals: [],
      addProposal: jest.fn(),
      updateProposal: jest.fn(),
      removeProposal: jest.fn(),
      getProposalById: jest.fn(),
      createHolidayCharityProposal: jest.fn(),
      createCharityDirectoryProposal: jest.fn(),
      createPlatformFeatureProposal: jest.fn(),
    });
  });

  describe('Basic Rendering', () => {
    it('renders with correct title and description', () => {
      render(<CharityDirectoryVoting proposal={mockProposal} />);

      expect(
        screen.getByText('Charity Directory Addition')
      ).toBeInTheDocument();
      expect(
        screen.getByText(
          'Review the charity details and vote on directory inclusion'
        )
      ).toBeInTheDocument();
    });

    it('displays charity information correctly', () => {
      render(<CharityDirectoryVoting proposal={mockProposal} />);

      expect(
        screen.getByText('Veterans Support Foundation')
      ).toBeInTheDocument();
      expect(
        screen.getByText(
          'Supporting veterans in their transition to civilian life with comprehensive programs including job training, mental health support, and housing assistance.'
        )
      ).toBeInTheDocument();
      expect(screen.getByText('EIN: 12-3456789')).toBeInTheDocument();
      expect(screen.getByText('veterans')).toBeInTheDocument();
    });

    it('displays charity website link', () => {
      render(<CharityDirectoryVoting proposal={mockProposal} />);

      const websiteLink = screen.getByRole('link', {
        name: /veteranssupport.org/i,
      });
      expect(websiteLink).toBeInTheDocument();
      expect(websiteLink).toHaveAttribute(
        'href',
        'https://veteranssupport.org'
      );
      expect(websiteLink).toHaveAttribute('target', '_blank');
    });

    it('displays charity address when available', () => {
      render(<CharityDirectoryVoting proposal={mockProposal} />);

      expect(
        screen.getByText(/123 Main St, Washington, DC 20001/)
      ).toBeInTheDocument();
    });
  });

  describe('Verification Status', () => {
    it('shows documents provided status when verification documents exist', () => {
      render(<CharityDirectoryVoting proposal={mockProposal} />);

      expect(screen.getByText('Documents Provided')).toBeInTheDocument();
    });

    it('shows pending documentation status when no verification documents', () => {
      render(<CharityDirectoryVoting proposal={mockProposalWithoutDocs} />);

      expect(screen.getByText('Pending Documentation')).toBeInTheDocument();
    });

    it('displays verification documents when available', () => {
      render(<CharityDirectoryVoting proposal={mockProposal} />);

      expect(
        screen.getByText('Verification Documents (2)')
      ).toBeInTheDocument();
      expect(screen.getByText('Document 1')).toBeInTheDocument();
      expect(screen.getByText('Document 2')).toBeInTheDocument();
    });

    it('allows viewing verification documents', async () => {
      const user = userEvent.setup();
      const mockWindowOpen = jest
        .spyOn(window, 'open')
        .mockImplementation(() => null);

      render(<CharityDirectoryVoting proposal={mockProposal} />);

      const viewButtons = screen.getAllByRole('button', { name: /view/i });
      expect(viewButtons).toHaveLength(2);

      await user.click(viewButtons[0]);

      expect(mockWindowOpen).toHaveBeenCalledWith('doc1.pdf', '_blank');

      mockWindowOpen.mockRestore();
    });

    it('does not show verification documents section when none exist', () => {
      render(<CharityDirectoryVoting proposal={mockProposalWithoutDocs} />);

      expect(
        screen.queryByText('Verification Documents')
      ).not.toBeInTheDocument();
    });
  });

  describe('Voting Considerations', () => {
    it('displays voting considerations section', () => {
      render(<CharityDirectoryVoting proposal={mockProposal} />);

      expect(screen.getByText('Voting Considerations')).toBeInTheDocument();
      expect(
        screen.getByText(/Is this charity aligned with VMF's mission/)
      ).toBeInTheDocument();
      expect(
        screen.getByText(/Are the provided verification documents sufficient/)
      ).toBeInTheDocument();
      expect(
        screen.getByText(/Does the charity have a good reputation/)
      ).toBeInTheDocument();
      expect(
        screen.getByText(/Will adding this charity benefit the VMF community/)
      ).toBeInTheDocument();
    });
  });

  describe('Voting Actions', () => {
    it('renders all voting buttons', () => {
      render(<CharityDirectoryVoting proposal={mockProposal} />);

      expect(
        screen.getByRole('button', { name: /vote yes.*add to directory/i })
      ).toBeInTheDocument();
      expect(
        screen.getByRole('button', { name: /vote no.*reject addition/i })
      ).toBeInTheDocument();
      expect(
        screen.getByRole('button', { name: /abstain/i })
      ).toBeInTheDocument();
    });

    it('submits Yes vote correctly', async () => {
      const user = userEvent.setup();
      mockSubmitVote.mockResolvedValue(undefined);

      render(
        <CharityDirectoryVoting
          proposal={mockProposal}
          onVoteSubmitted={mockOnVoteSubmitted}
        />
      );

      const yesButton = screen.getByRole('button', {
        name: /vote yes.*add to directory/i,
      });
      await user.click(yesButton);

      await waitFor(() => {
        expect(mockSubmitVote).toHaveBeenCalledWith('charity-1', 'yes', 1);
        expect(mockOnVoteSubmitted).toHaveBeenCalled();
      });
    });

    it('submits No vote correctly', async () => {
      const user = userEvent.setup();
      mockSubmitVote.mockResolvedValue(undefined);

      render(
        <CharityDirectoryVoting
          proposal={mockProposal}
          onVoteSubmitted={mockOnVoteSubmitted}
        />
      );

      const noButton = screen.getByRole('button', {
        name: /vote no.*reject addition/i,
      });
      await user.click(noButton);

      await waitFor(() => {
        expect(mockSubmitVote).toHaveBeenCalledWith('charity-1', 'no', 1);
        expect(mockOnVoteSubmitted).toHaveBeenCalled();
      });
    });

    it('submits Abstain vote correctly', async () => {
      const user = userEvent.setup();
      mockSubmitVote.mockResolvedValue(undefined);

      render(
        <CharityDirectoryVoting
          proposal={mockProposal}
          onVoteSubmitted={mockOnVoteSubmitted}
        />
      );

      const abstainButton = screen.getByRole('button', { name: /abstain/i });
      await user.click(abstainButton);

      await waitFor(() => {
        expect(mockSubmitVote).toHaveBeenCalledWith('charity-1', 'abstain', 1);
        expect(mockOnVoteSubmitted).toHaveBeenCalled();
      });
    });
  });

  describe('Loading States', () => {
    it('shows loading state during vote submission', async () => {
      const user = userEvent.setup();
      mockSubmitVote.mockImplementation(
        () => new Promise(resolve => setTimeout(resolve, 1000))
      );

      render(<CharityDirectoryVoting proposal={mockProposal} />);

      const yesButton = screen.getByRole('button', {
        name: /vote yes.*add to directory/i,
      });
      await user.click(yesButton);

      expect(screen.getByText('Submitting...')).toBeInTheDocument();
    });

    it('disables all buttons during submission', async () => {
      const user = userEvent.setup();
      mockSubmitVote.mockImplementation(
        () => new Promise(resolve => setTimeout(resolve, 1000))
      );

      render(<CharityDirectoryVoting proposal={mockProposal} />);

      const yesButton = screen.getByRole('button', {
        name: /vote yes.*add to directory/i,
      });
      await user.click(yesButton);

      expect(
        screen.getByRole('button', { name: /submitting/i })
      ).toBeDisabled();
      expect(
        screen.getByRole('button', { name: /vote no.*reject addition/i })
      ).toBeDisabled();
      expect(screen.getByRole('button', { name: /abstain/i })).toBeDisabled();
    });
  });

  describe('Error Handling', () => {
    it('handles vote submission errors gracefully', async () => {
      const user = userEvent.setup();
      const consoleError = jest
        .spyOn(console, 'error')
        .mockImplementation(() => {});
      mockSubmitVote.mockRejectedValue(new Error('Network error'));

      render(<CharityDirectoryVoting proposal={mockProposal} />);

      const yesButton = screen.getByRole('button', {
        name: /vote yes.*add to directory/i,
      });
      await user.click(yesButton);

      await waitFor(() => {
        expect(consoleError).toHaveBeenCalledWith(
          'Failed to submit vote:',
          expect.any(Error)
        );
      });

      consoleError.mockRestore();
    });
  });

  describe('Edge Cases', () => {
    it('works without onVoteSubmitted callback', async () => {
      const user = userEvent.setup();
      mockSubmitVote.mockResolvedValue(undefined);

      render(<CharityDirectoryVoting proposal={mockProposal} />);

      const yesButton = screen.getByRole('button', {
        name: /vote yes.*add to directory/i,
      });

      await user.click(yesButton);

      expect(mockSubmitVote).toHaveBeenCalledWith(mockProposal.id, 'yes');
    });

    it('handles missing charity address gracefully', () => {
      const proposalWithoutAddress = {
        ...mockProposal,
        charityData: {
          ...mockProposal.charityData,
          address: {
            street: '',
            city: '',
            state: '',
            zipCode: '',
          },
        },
      } as CharityDirectoryProposal;

      render(<CharityDirectoryVoting proposal={proposalWithoutAddress} />);

      expect(
        screen.getByText('Veterans Support Foundation')
      ).toBeInTheDocument();
      // Should not crash when address is empty
    });

    it('handles missing charity website gracefully', () => {
      const proposalWithoutWebsite = {
        ...mockProposal,
        charityData: {
          ...mockProposal.charityData,
          website: '',
        },
      } as CharityDirectoryProposal;

      render(<CharityDirectoryVoting proposal={proposalWithoutWebsite} />);

      expect(
        screen.getByText('Veterans Support Foundation')
      ).toBeInTheDocument();
      // Should not show website link when website is empty
      expect(screen.queryByRole('link')).not.toBeInTheDocument();
    });

    it('handles undefined verification documents array', () => {
      const proposalWithUndefinedDocs = {
        ...mockProposal,
        verificationDocuments: [],
      } as CharityDirectoryProposal;

      render(<CharityDirectoryVoting proposal={proposalWithUndefinedDocs} />);

      expect(screen.getByText('Pending Documentation')).toBeInTheDocument();
      expect(
        screen.queryByText('Verification Documents')
      ).not.toBeInTheDocument();
    });
  });

  describe('Accessibility', () => {
    it('has proper button labels for screen readers', () => {
      render(<CharityDirectoryVoting proposal={mockProposal} />);

      expect(
        screen.getByRole('button', { name: /vote yes.*add to directory/i })
      ).toBeInTheDocument();
      expect(
        screen.getByRole('button', { name: /vote no.*reject addition/i })
      ).toBeInTheDocument();
      expect(
        screen.getByRole('button', { name: /abstain/i })
      ).toBeInTheDocument();
    });

    it('has proper external link attributes', () => {
      render(<CharityDirectoryVoting proposal={mockProposal} />);

      const websiteLink = screen.getByRole('link');
      expect(websiteLink).toHaveAttribute('rel', 'noopener noreferrer');
      expect(websiteLink).toHaveAttribute('target', '_blank');
    });
  });
});
